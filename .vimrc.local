" >>
" YCM 补全

" YCM 补全菜单配色
" 菜单
highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900

" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1

" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0

" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=0
"" 引入 C++ 标准库 tags
set tags+=/usr/include/tags
set tags+=/home/hero/project/calmcar/tags

" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>

" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview



"设置全局配置
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1

" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0

" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1

let g:ycm_server_python_interpreter="/usr/bin/python2.7"
let g:ycm_python_binary_path = '/usr/bin/python3.5'

nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
" 只能是 #include 或已打开的文件
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gt :YcmCompleter GoTo<CR>

nmap <Leader>q :q<CR>
nmap <Leader>sh :sh

"let g:spf13_no_autochdir = 1

nnoremap <F10> :call UpdateCtags()<CR>
function! UpdateCtags()
    let curdir=getcwd()
    while !filereadable("./tags")
        cd ..
        if getcwd() == "/"
            break
        endif
    endwhile
    if filewritable("./tags")
        echo "here"
        !ctags -R --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+liaS --extra=+q
    endif
    execute ":cd " . curdir
endfunction

set encoding=utf-8
nnoremap <leader>of :FSHere<cr>
nnoremap <leader>ol :FSRight<cr>
nnoremap <leader>oL :FSSplitRight<cr>
nnoremap <leader>oh :FSLeft<cr>
nnoremap <leader>oH :FSSplitLeft<cr>

nnoremap <F7> :call Make()<CR>
function! Make()
  let curdir=getcwd()
  while !filereadable("./Makefile")
    cd ..
    if getcwd() == "/"
      break
    endif
  endwhile
  if filereadable("./Makefile")
    :make -j4
  else
    echo "Makefile not found"
  endif
endfunction

nnoremap <F3> :Rgrep<cr>
"vim
let g:rainbow_conf = {
\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\	'operators': '_,_',
\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\	'separately': {
\		'*': {},
\		'tex': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\		},
\		'lisp': {
\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\		},
\		'vim': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\		},
\		'html': {
\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\		},
\		'css': 0,
\	}
\}

"vim-cpp-enhanced-highlight
let g:cpp_class_scope_hightlight = 1
"Highlighting of class scope is disabled by default. To enable set
let g:cpp_class_scope_highlight = 1

"Highlighting of member variables is disabled by default. To enable set

let g:cpp_member_variable_highlight = 1

"Highlighting of class names in declarations is disabled by default. To enable set

let g:cpp_class_decl_highlight = 1

"There are two ways to highlight template functions. Either

let g:cpp_experimental_simple_template_highlight = 1

"which works in most cases, but can be a little slow on large files. Alternatively set

let g:cpp_experimental_template_highlight = 1

"Highlighting of library concepts is enabled by

let g:cpp_concepts_highlight = 1

"Highlighting of user defined functions can be disabled by

let g:cpp_no_function_highlight = 0

"TagHightLight settings

noremap <F2> :UpdateTypesFileOnly<CR>

noremap <leader>bs :BufExplorerHorizontalSplit<CR>
noremap <leader>bv :BufExplorerVerticalSplit<CR>

let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='molokai'
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>
noremap <Leader>mo :MBEOpenAll!<CR>
noremap <Leader>mc :MBECloseAll!<CR>
"google格式化
let g:clang_format#auto_format_on_insert_leave=1    "退出插入模式时自动格式化
